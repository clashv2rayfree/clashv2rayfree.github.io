<!DOCTYPE HTML>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashv2rayfree.github.io/news/article-35407.htm" />
    <title>Controller层代码这么写，简洁又优雅！</title>
        <meta name="description" content="文章来源：https://c1n.cn/LE5Ww‍‍‍ 目录   一个优秀的 Controller 层逻辑   从现状看问题   改造 Controller 层逻辑   总结   一个优秀的 Con" />
    
    <meta name="author" content="ClashV2rayFree官网节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashv2rayfree.github.io/news/article-35407.htm" />
    <meta property="og:site_name" content="ClashV2rayFree官网节点站" />
    <meta property="og:title" content="Controller层代码这么写，简洁又优雅！" />
    <meta property="og:image" content="https://clashv2rayfree.github.io/uploads/20240412/2422ffe74930c36a04fc48478b6d208f.webp" />
        <meta property="og:release_date" content="2025-01-04T10:22:38" />
    <meta property="og:updated_time" content="2025-01-04T10:22:38" />
        <meta property="og:description" content="文章来源：https://c1n.cn/LE5Ww‍‍‍ 目录   一个优秀的 Controller 层逻辑   从现状看问题   改造 Controller 层逻辑   总结   一个优秀的 Con" />
        
    <link href="/assets/website/css/clashv2rayfree/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/website/css/clashv2rayfree/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/website/img/clashv2rayfree/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/website/js/frontend/clashv2rayfree/jquery-1.11.0.min.js"></script>
    <script src="/assets/website/js/frontend/clashv2rayfree/bootstrap.min.js"></script>

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Controller层代码这么写，简洁又优雅！">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0NF953KP3Y"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0NF953KP3Y');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">Clash V2ray Free</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/free-nodes/">免费节点</a>
                                    </li>
                                                                        <li>
                                        <a href="/paid-subscribe/">推荐机场</a>
                                    </li>
                                                                        <li>
                                        <a href="/client.htm">客户端</a>
                                    </li>
                                                                        <li>
                                        <a href="/news/">新闻资讯</a>
                                    </li>
                                                                    </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/news/">新闻资讯</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Controller层代码这么写，简洁又优雅！</h1>
                        </div>
                        <div class="about-bottom">
                                            <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <div id="js_content"> <hr/> <p style="text-align:right;">文章来源：https://c1n.cn/LE5Ww‍‍‍</p> <p style="text-align:left;"><strong>目录</strong></p> <ul> <li> <p>一个优秀的 Controller 层逻辑</p> </li> <li> <p>从现状看问题</p> </li> <li> <p>改造 Controller 层逻辑</p> </li> <li> <p>总结</p> </li> </ul> <p><strong>一个优秀的 Controller 层逻辑</strong></p> </h1> </h1> </h1> </h1> </h1> </h1> <p><strong>从现状看问题</strong></p> <p>Controller 主要的工作有以下几项：</p> <ul> <li> <p>接收请求并解析参数</p> </li> <li> <p>调用 Service 执行具体的业务代码（可能包含参数校验）</p> </li> <li> <p>捕获业务逻辑异常做出反馈</p> </li> <li> <p>业务逻辑执行成功做出响应</p> </li> </ul> <pre class="has"><code class="language-go">//DTO @Data public&nbsp;class&nbsp;TestDTO&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;num; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;type; }   //Service @Service public&nbsp;class&nbsp;TestService&nbsp;{  &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Double&nbsp;service(TestDTO&nbsp;testDTO)&nbsp;throws&nbsp;Exception&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(testDTO.getNum()&nbsp;&lt;=&nbsp;0)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;Exception("输入的数字需要大于0"); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(testDTO.getType().equals("square"))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Math.pow(testDTO.getNum(),&nbsp;2); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(testDTO.getType().equals("factorial"))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;result&nbsp;=&nbsp;1; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;num&nbsp;=&nbsp;testDTO.getNum(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(num&nbsp;&gt;&nbsp;1)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;result&nbsp;*&nbsp;num; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num&nbsp;-=&nbsp;1; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;Exception("未识别的算法"); &nbsp;&nbsp;&nbsp;&nbsp;} }   //Controller @RestController public&nbsp;class&nbsp;TestController&nbsp;{  &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;TestService&nbsp;testService;  &nbsp;&nbsp;&nbsp;&nbsp;@PostMapping("/test") &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Double&nbsp;test(@RequestBody&nbsp;TestDTO&nbsp;testDTO)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Double&nbsp;result&nbsp;=&nbsp;this.testService.service(testDTO); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;RuntimeException(e); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;@Autowired &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;DTOid&nbsp;setTestService(TestService&nbsp;testService)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.testService&nbsp;=&nbsp;testService; &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <p>如果真的按照上面所列的工作项来开发 Controller 代码会有几个问题：</p> <ul> <li> <p>参数校验过多地耦合了业务代码，违背单一职责原则</p> </li> <li> <p>可能在多个业务中都抛出同一个异常，导致代码重复</p> </li> <li> <p>各种异常反馈和成功响应格式不统一，接口对接不友好</p> </li> </ul> <h2></h2> <p><strong>改造 Controller 层逻辑</strong></p> <h4><strong>| 统一返回结构</strong></h4> <p>统一返回值类型无论项目前后端是否分离都是非常必要的，方便对接接口的开发人员更加清晰地知道这个接口的调用是否成功（不能仅仅简单地看返回值是否为 null 就判断成功与否，因为有些接口的设计就是如此）。</p> <p>使用一个状态码、状态信息就能清楚地了解接口调用情况：</p> <pre class="has"><code class="language-go">//定义返回数据结构 public&nbsp;interface&nbsp;IResult&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;getCode(); &nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;getMessage(); }  //常用结果的枚举 public&nbsp;enum&nbsp;ResultEnum&nbsp;implements&nbsp;IResult&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;SUCCESS(2001,&nbsp;"接口调用成功"), &nbsp;&nbsp;&nbsp;&nbsp;VALIDATE_FAILED(2002,&nbsp;"参数校验失败"), &nbsp;&nbsp;&nbsp;&nbsp;COMMON_FAILED(2003,&nbsp;"接口调用失败"), &nbsp;&nbsp;&nbsp;&nbsp;FORBIDDEN(2004,&nbsp;"没有权限访问资源");  &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;code; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;message;  &nbsp;&nbsp;&nbsp;&nbsp;//省略get、set方法和构造方法 }  //统一返回数据结构 @Data @NoArgsConstructor @AllArgsConstructor public&nbsp;class&nbsp;Result&lt;T&gt;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;code; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;message; &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;T&nbsp;data;  &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;&lt;T&gt;&nbsp;Result&lt;T&gt;&nbsp;success(T&nbsp;data)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Result&lt;&gt;(ResultEnum.SUCCESS.getCode(),&nbsp;ResultEnum.SUCCESS.getMessage(),&nbsp;data); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;&lt;T&gt;&nbsp;Result&lt;T&gt;&nbsp;success(String&nbsp;message,&nbsp;T&nbsp;data)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Result&lt;&gt;(ResultEnum.SUCCESS.getCode(),&nbsp;message,&nbsp;data); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;Result&lt;?&gt;&nbsp;failed()&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Result&lt;&gt;(ResultEnum.COMMON_FAILED.getCode(),&nbsp;ResultEnum.COMMON_FAILED.getMessage(),&nbsp;null); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;Result&lt;?&gt;&nbsp;failed(String&nbsp;message)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Result&lt;&gt;(ResultEnum.COMMON_FAILED.getCode(),&nbsp;message,&nbsp;null); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;Result&lt;?&gt;&nbsp;failed(IResult&nbsp;errorResult)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Result&lt;&gt;(errorResult.getCode(),&nbsp;errorResult.getMessage(),&nbsp;null); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;&lt;T&gt;&nbsp;Result&lt;T&gt;&nbsp;instance(Integer&nbsp;code,&nbsp;String&nbsp;message,&nbsp;T&nbsp;data)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result&lt;T&gt;&nbsp;result&nbsp;=&nbsp;new&nbsp;Result&lt;&gt;(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.setCode(code); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.setMessage(message); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.setData(data); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result; &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <p>统一返回结构后，在 Controller 中就可以使用了，但是每一个 Controller 都写这么一段最终封装的逻辑，这些都是很重复的工作，所以还要继续想办法进一步处理统一返回结构。</p> <h4><strong>| 统一包装处理</strong></h4> <p>Spring 中提供了一个类 ResponseBodyAdvice ，能帮助我们实现上述需求：</p> <pre class="has"><code class="language-go">public&nbsp;interface&nbsp;ResponseBodyAdvice&lt;T&gt;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;supports(MethodParameter&nbsp;returnType,&nbsp;Class&lt;?&nbsp;extends&nbsp;HttpMessageConverter&lt;?&gt;&gt;&nbsp;converterType);  &nbsp;&nbsp;&nbsp;&nbsp;@Nullable &nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;beforeBodyWrite(@Nullable&nbsp;T&nbsp;body,&nbsp;MethodParameter&nbsp;returnType,&nbsp;MediaType&nbsp;selectedContentType,&nbsp;Class&lt;?&nbsp;extends&nbsp;HttpMessageConverter&lt;?&gt;&gt;&nbsp;selectedConverterType,&nbsp;ServerHttpRequest&nbsp;request,&nbsp;ServerHttpResponse&nbsp;response); }</code></pre> <p>ResponseBodyAdvice 是对 Controller 返回的内容在 HttpMessageConverter 进行类型转换之前拦截，进行相应的处理操作后，再将结果返回给客户端。</p> <p>那这样就可以把统一包装的工作放到这个类里面：</p> <ul> <li> <p><strong>supports：</strong>判断是否要交给 beforeBodyWrite 方法执行，ture：需要；false：不需要</p> </li> <li> <p><strong>beforeBodyWrite：</strong>对 response 进行具体的处理</p> </li> </ul> <pre class="has"><code class="language-go">//&nbsp;如果引入了swagger或knife4j的文档生成组件，这里需要仅扫描自己项目的包，否则文档无法正常生成 @RestControllerAdvice(basePackages&nbsp;=&nbsp;"com.example.demo") public&nbsp;class&nbsp;ResponseAdvice&nbsp;implements&nbsp;ResponseBodyAdvice&lt;Object&gt;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;@Override &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;supports(MethodParameter&nbsp;returnType,&nbsp;Class&lt;?&nbsp;extends&nbsp;HttpMessageConverter&lt;?&gt;&gt;&nbsp;converterType)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果不需要进行封装的，可以添加一些校验手段，比如添加标记排除的注解 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true; &nbsp;&nbsp;&nbsp;&nbsp;}   &nbsp;&nbsp;&nbsp;&nbsp;@Override &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;beforeBodyWrite(Object&nbsp;body,&nbsp;MethodParameter&nbsp;returnType,&nbsp;MediaType&nbsp;selectedContentType,&nbsp;Class&lt;?&nbsp;extends&nbsp;HttpMessageConverter&lt;?&gt;&gt;&nbsp;selectedConverterType,&nbsp;ServerHttpRequest&nbsp;request,&nbsp;ServerHttpResponse&nbsp;response)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;提供一定的灵活度，如果body已经被包装了，就不进行包装 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(body&nbsp;instanceof&nbsp;Result)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;body; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result.success(body); &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <p>经过这样改造，既能实现对 Controller 返回的数据进行统一包装，又不需要对原有代码进行大量的改动。</p> <h4><strong>| 参数校验</strong></h4> <p>Java API 的规范 JSR303 定义了校验的标准 validation-api ，其中一个比较出名的实现是 hibernate validation。</p> <p>spring validation 是对其的二次封装，常用于 SpringMVC 的参数自动校验，参数校验的代码就不需要再与业务逻辑代码进行耦合了。</p> <h4><strong>①@PathVariable 和 @RequestParam 参数校验</strong></h4> <p>Get 请求的参数接收一般依赖这两个注解，但是处于 url 有长度限制和代码的可维护性，超过 5 个参数尽量用实体来传参。</p> <p>对 @PathVariable 和 @RequestParam 参数进行校验需要在入参声明约束的注解。</p> <p>如果校验失败，会抛出 MethodArgumentNotValidException 异常。</p> <pre class="has"><code class="language-go">@RestController(value&nbsp;=&nbsp;"prettyTestController") @RequestMapping("/pretty") public&nbsp;class&nbsp;TestController&nbsp;{  &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;TestService&nbsp;testService;  &nbsp;&nbsp;&nbsp;&nbsp;@GetMapping("/{num}") &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Integer&nbsp;detail(@PathVariable("num")&nbsp;@Min(1)&nbsp;@Max(20)&nbsp;Integer&nbsp;num)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;num&nbsp;*&nbsp;num; &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;@GetMapping("/getByEmail") &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;TestDTO&nbsp;getByAccount(@RequestParam&nbsp;@NotBlank&nbsp;@Email&nbsp;String&nbsp;email)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TestDTO&nbsp;testDTO&nbsp;=&nbsp;new&nbsp;TestDTO(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testDTO.setEmail(email); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;testDTO; &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;@Autowired &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setTestService(TestService&nbsp;prettyTestService)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.testService&nbsp;=&nbsp;prettyTestService; &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <h4><strong>校验原理</strong></h4> <p>在 SpringMVC 中，有一个类是 RequestResponseBodyMethodProcessor，这个类有两个作用（实际上可以从名字上得到一点启发）</p> <ul> <li> <p>用于解析 @RequestBody 标注的参数</p> </li> <li> <p>处理 @ResponseBody 标注方法的返回值</p> </li> </ul> <p>解析 @RequestBoyd 标注参数的方法是 resolveArgument。</p> <pre class="has"><code class="language-go">public&nbsp;class&nbsp;RequestResponseBodyMethodProcessor&nbsp;extends&nbsp;AbstractMessageConverterMethodProcessor&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Throws&nbsp;MethodArgumentNotValidException&nbsp;if&nbsp;validation&nbsp;fails. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;HttpMessageNotReadableException&nbsp;if&nbsp;{@link&nbsp;RequestBody#required()} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;is&nbsp;{@code&nbsp;true}&nbsp;and&nbsp;there&nbsp;is&nbsp;no&nbsp;body&nbsp;content&nbsp;or&nbsp;if&nbsp;there&nbsp;is&nbsp;no&nbsp;suitable &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;converter&nbsp;to&nbsp;read&nbsp;the&nbsp;content&nbsp;with. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;@Override &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;resolveArgument(MethodParameter&nbsp;parameter,&nbsp;@Nullable&nbsp;ModelAndViewContainer&nbsp;mavContainer, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NativeWebRequest&nbsp;webRequest,&nbsp;@Nullable&nbsp;WebDataBinderFactory&nbsp;binderFactory)&nbsp;throws&nbsp;Exception&nbsp;{  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameter&nbsp;=&nbsp;parameter.nestedIfOptional(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把请求数据封装成标注的DTO对象 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;arg&nbsp;=&nbsp;readWithMessageConverters(webRequest,&nbsp;parameter,&nbsp;parameter.getNestedGenericParameterType()); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;name&nbsp;=&nbsp;Conventions.getVariableNameForParameter(parameter);  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(binderFactory&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WebDataBinder&nbsp;binder&nbsp;=&nbsp;binderFactory.createBinder(webRequest,&nbsp;arg,&nbsp;name); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(arg&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//执行数据校验 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;validateIfApplicable(binder,&nbsp;parameter); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果校验不通过，就抛出MethodArgumentNotValidException异常 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果我们不自己捕获，那么最终会由DefaultHandlerExceptionResolver捕获处理 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(binder.getBindingResult().hasErrors()&nbsp;&amp;&amp;&nbsp;isBindExceptionRequired(binder,&nbsp;parameter))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;MethodArgumentNotValidException(parameter,&nbsp;binder.getBindingResult()); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mavContainer&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX&nbsp;+&nbsp;name,&nbsp;binder.getBindingResult()); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;adaptArgumentIfNecessary(arg,&nbsp;parameter); &nbsp;&nbsp;&nbsp;&nbsp;} }  public&nbsp;abstract&nbsp;class&nbsp;AbstractMessageConverterMethodArgumentResolver&nbsp;implements&nbsp;HandlerMethodArgumentResolver&nbsp;{ &nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Validate&nbsp;the&nbsp;binding&nbsp;target&nbsp;if&nbsp;applicable. &nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&lt;p&gt;The&nbsp;default&nbsp;implementation&nbsp;checks&nbsp;for&nbsp;{@code&nbsp;@javax.validation.Valid}, &nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Spring's&nbsp;{@link&nbsp;org.springframework.validation.annotation.Validated}, &nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;and&nbsp;custom&nbsp;annotations&nbsp;whose&nbsp;name&nbsp;starts&nbsp;with&nbsp;"Valid". &nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;binder&nbsp;the&nbsp;DataBinder&nbsp;to&nbsp;be&nbsp;used &nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;parameter&nbsp;the&nbsp;method&nbsp;parameter&nbsp;descriptor &nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@since&nbsp;4.1.5 &nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@see&nbsp;#isBindExceptionRequired &nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;validateIfApplicable(WebDataBinder&nbsp;binder,&nbsp;MethodParameter&nbsp;parameter)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;//获取参数上的所有注解 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Annotation[]&nbsp;annotations&nbsp;=&nbsp;parameter.getParameterAnnotations(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Annotation&nbsp;ann&nbsp;:&nbsp;annotations)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果注解中包含了@Valid、@Validated或者是名字以Valid开头的注解就进行参数校验 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;validationHints&nbsp;=&nbsp;ValidationAnnotationUtils.determineValidationHints(ann); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(validationHints&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//实际校验逻辑，最终会调用Hibernate&nbsp;Validator执行真正的校验 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//所以Spring&nbsp;Validation是对Hibernate&nbsp;Validation的二次封装 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binder.validate(validationHints); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;} }</code></pre> <h4><strong>②@RequestBody 参数校验</strong></h4> <p>Post、Put 请求的参数推荐使用 @RequestBody 请求体参数。</p> <p>对 @RequestBody 参数进行校验需要在 DTO 对象中加入校验条件后，再搭配 @Validated 即可完成自动校验。</p> <p>如果校验失败，会抛出 ConstraintViolationException 异常。</p> <pre class="has"><code class="language-go">//DTO @Data public&nbsp;class&nbsp;TestDTO&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;@NotBlank &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;userName;  &nbsp;&nbsp;&nbsp;&nbsp;@NotBlank &nbsp;&nbsp;&nbsp;&nbsp;@Length(min&nbsp;=&nbsp;6,&nbsp;max&nbsp;=&nbsp;20) &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;password;  &nbsp;&nbsp;&nbsp;&nbsp;@NotNull &nbsp;&nbsp;&nbsp;&nbsp;@Email &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;email; }  //Controller @RestController(value&nbsp;=&nbsp;"prettyTestController") @RequestMapping("/pretty") public&nbsp;class&nbsp;TestController&nbsp;{  &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;TestService&nbsp;testService;  &nbsp;&nbsp;&nbsp;&nbsp;@PostMapping("/test-validation") &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;testValidation(@RequestBody&nbsp;@Validated&nbsp;TestDTO&nbsp;testDTO)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.testService.save(testDTO); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;@Autowired &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setTestService(TestService&nbsp;testService)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.testService&nbsp;=&nbsp;testService; &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <h4><strong>校验原理</strong></h4> <p>声明约束的方式，注解加到了参数上面，可以比较容易猜测到是使用了 AOP 对方法进行增强。</p> <p>而实际上 Spring 也是通过 MethodValidationPostProcessor 动态注册 AOP 切面，然后使用 MethodValidationInterceptor 对切点方法进行织入增强。</p> <pre class="has"><code class="language-go">public&nbsp;class&nbsp;MethodValidationPostProcessor&nbsp;extends&nbsp;AbstractBeanFactoryAwareAdvisingPostProcessor&nbsp;implements&nbsp;InitializingBean&nbsp;{  &nbsp;&nbsp;&nbsp;&nbsp;//指定了创建切面的Bean的注解 &nbsp;&nbsp;&nbsp;private&nbsp;Class&lt;?&nbsp;extends&nbsp;Annotation&gt;&nbsp;validatedAnnotationType&nbsp;=&nbsp;Validated.class;  &nbsp;&nbsp;&nbsp;&nbsp;@Override &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;afterPropertiesSet()&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//为所有@Validated标注的Bean创建切面 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pointcut&nbsp;pointcut&nbsp;=&nbsp;new&nbsp;AnnotationMatchingPointcut(this.validatedAnnotationType,&nbsp;true); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建Advisor进行增强 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.advisor&nbsp;=&nbsp;new&nbsp;DefaultPointcutAdvisor(pointcut,&nbsp;createMethodValidationAdvice(this.validator)); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;//创建Advice，本质就是一个方法拦截器 &nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;Advice&nbsp;createMethodValidationAdvice(@Nullable&nbsp;Validator&nbsp;validator)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(validator&nbsp;!=&nbsp;null&nbsp;?&nbsp;new&nbsp;MethodValidationInterceptor(validator)&nbsp;:&nbsp;new&nbsp;MethodValidationInterceptor()); &nbsp;&nbsp;&nbsp;&nbsp;} }  public&nbsp;class&nbsp;MethodValidationInterceptor&nbsp;implements&nbsp;MethodInterceptor&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;@Override &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;invoke(MethodInvocation&nbsp;invocation)&nbsp;throws&nbsp;Throwable&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//无需增强的方法，直接跳过 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(isFactoryBeanMetadataMethod(invocation.getMethod()))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;invocation.proceed(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;[]&nbsp;groups&nbsp;=&nbsp;determineValidationGroups(invocation); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ExecutableValidator&nbsp;execVal&nbsp;=&nbsp;this.validator.forExecutables(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method&nbsp;methodToValidate&nbsp;=&nbsp;invocation.getMethod(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set&lt;ConstraintViolation&lt;Object&gt;&gt;&nbsp;result; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//方法入参校验，最终还是委托给Hibernate&nbsp;Validator来校验 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//所以Spring&nbsp;Validation是对Hibernate&nbsp;Validation的二次封装 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;execVal.validateParameters( &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invocation.getThis(),&nbsp;methodToValidate,&nbsp;invocation.getArguments(),&nbsp;groups); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch&nbsp;(IllegalArgumentException&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;... &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//校验不通过抛出ConstraintViolationException异常 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!result.isEmpty())&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConstraintViolationException(result); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Controller方法调用 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;returnValue&nbsp;=&nbsp;invocation.proceed(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//下面是对返回值做校验，流程和上面大概一样 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;execVal.validateReturnValue(invocation.getThis(),&nbsp;methodToValidate,&nbsp;returnValue,&nbsp;groups); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!result.isEmpty())&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ConstraintViolationException(result); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;returnValue; &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <h4><strong>③自定义校验规则</strong></h4> <p>有些时候 JSR303 标准中提供的校验规则不满足复杂的业务需求，也可以自定义校验规则。</p> <p>自定义校验规则需要做两件事情：</p> <ul> <li> <p>自定义注解类，定义错误信息和一些其他需要的内容</p> </li> <li> <p>注解校验器，定义判定规则</p> </li> </ul> <pre class="has"><code class="language-go">//自定义注解类 @Target({ElementType.METHOD,&nbsp;ElementType.FIELD,&nbsp;ElementType.ANNOTATION_TYPE,&nbsp;ElementType.CONSTRUCTOR,&nbsp;ElementType.PARAMETER}) @Retention(RetentionPolicy.RUNTIME) @Documented @Constraint(validatedBy&nbsp;=&nbsp;MobileValidator.class) public&nbsp;@interface&nbsp;Mobile&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;是否允许为空 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;required()&nbsp;default&nbsp;true;  &nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;校验不通过返回的提示信息 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;message()&nbsp;default&nbsp;"不是一个手机号码格式";  &nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Constraint要求的属性，用于分组校验和扩展，留空就好 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;[]&nbsp;groups()&nbsp;default&nbsp;{}; &nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&nbsp;extends&nbsp;Payload&gt;[]&nbsp;payload()&nbsp;default&nbsp;{}; }  //注解校验器 public&nbsp;class&nbsp;MobileValidator&nbsp;implements&nbsp;ConstraintValidator&lt;Mobile,&nbsp;CharSequence&gt;&nbsp;{  &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;boolean&nbsp;required&nbsp;=&nbsp;false;  &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;final&nbsp;Pattern&nbsp;pattern&nbsp;=&nbsp;Pattern.compile("^1[34578][0-9]{9}$");&nbsp;//&nbsp;验证手机号  &nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;在验证开始前调用注解里的方法，从而获取到一些注解里的参数 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;constraintAnnotation&nbsp;annotation&nbsp;instance&nbsp;for&nbsp;a&nbsp;given&nbsp;constraint&nbsp;declaration &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;@Override &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;initialize(Mobile&nbsp;constraintAnnotation)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.required&nbsp;=&nbsp;constraintAnnotation.required(); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;判断参数是否合法 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;value&nbsp;&nbsp;&nbsp;object&nbsp;to&nbsp;validate &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;context&nbsp;context&nbsp;in&nbsp;which&nbsp;the&nbsp;constraint&nbsp;is&nbsp;evaluated &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;@Override &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;isValid(CharSequence&nbsp;value,&nbsp;ConstraintValidatorContext&nbsp;context)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.required)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;验证 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;isMobile(value); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(StringUtils.hasText(value))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;验证 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;isMobile(value); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true; &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;boolean&nbsp;isMobile(final&nbsp;CharSequence&nbsp;str)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Matcher&nbsp;m&nbsp;=&nbsp;pattern.matcher(str); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;m.matches(); &nbsp;&nbsp;&nbsp;&nbsp;} }</code></pre> <p>自动校验参数真的是一项非常必要、非常有意义的工作。JSR303 提供了丰富的参数校验规则，再加上复杂业务的自定义校验规则，完全把参数校验和业务逻辑解耦开，代码更加简洁，符合单一职责原则。</p> <h4><strong>| 自定义异常与统一拦截异常</strong></h4> <p>原来的代码中可以看到有几个问题：</p> <ul> <li> <p>抛出的异常不够具体，只是简单地把错误信息放到了 Exception 中</p> </li> <li> <p>抛出异常后，Controller 不能具体地根据异常做出反馈</p> </li> <li> <p>虽然做了参数自动校验，但是异常返回结构和正常返回结构不一致</p> </li> </ul> <p>自定义异常是为了后面统一拦截异常时，对业务中的异常有更加细颗粒度的区分，拦截时针对不同的异常作出不同的响应。</p> <p>而统一拦截异常的目的一个是为了可以与前面定义下来的统一包装返回结构能对应上，另一个是我们希望无论系统发生什么异常，Http 的状态码都要是 200 ，尽可能由业务来区分系统的异常。</p> <pre class="has"><code class="language-go">//自定义异常 public&nbsp;class&nbsp;ForbiddenException&nbsp;extends&nbsp;RuntimeException&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ForbiddenException(String&nbsp;message)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(message); &nbsp;&nbsp;&nbsp;&nbsp;} }  //自定义异常 public&nbsp;class&nbsp;BusinessException&nbsp;extends&nbsp;RuntimeException&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;BusinessException(String&nbsp;message)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(message); &nbsp;&nbsp;&nbsp;&nbsp;} }  //统一拦截异常 @RestControllerAdvice(basePackages&nbsp;=&nbsp;"com.example.demo") public&nbsp;class&nbsp;ExceptionAdvice&nbsp;{  &nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;捕获&nbsp;{@code&nbsp;BusinessException}&nbsp;异常 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;@ExceptionHandler({BusinessException.class}) &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Result&lt;?&gt;&nbsp;handleBusinessException(BusinessException&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result.failed(ex.getMessage()); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;捕获&nbsp;{@code&nbsp;ForbiddenException}&nbsp;异常 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;@ExceptionHandler({ForbiddenException.class}) &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Result&lt;?&gt;&nbsp;handleForbiddenException(ForbiddenException&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result.failed(ResultEnum.FORBIDDEN); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;{@code&nbsp;@RequestBody}&nbsp;参数校验不通过时抛出的异常处理 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;@ExceptionHandler({MethodArgumentNotValidException.class}) &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Result&lt;?&gt;&nbsp;handleMethodArgumentNotValidException(MethodArgumentNotValidException&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BindingResult&nbsp;bindingResult&nbsp;=&nbsp;ex.getBindingResult(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuilder&nbsp;sb&nbsp;=&nbsp;new&nbsp;StringBuilder("校验失败:"); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(FieldError&nbsp;fieldError&nbsp;:&nbsp;bindingResult.getFieldErrors())&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.append(fieldError.getField()).append("：").append(fieldError.getDefaultMessage()).append(",&nbsp;"); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;msg&nbsp;=&nbsp;sb.toString(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(StringUtils.hasText(msg))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result.failed(ResultEnum.VALIDATE_FAILED.getCode(),&nbsp;msg); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result.failed(ResultEnum.VALIDATE_FAILED); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;{@code&nbsp;@PathVariable}&nbsp;和&nbsp;{@code&nbsp;@RequestParam}&nbsp;参数校验不通过时抛出的异常处理 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;@ExceptionHandler({ConstraintViolationException.class}) &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Result&lt;?&gt;&nbsp;handleConstraintViolationException(ConstraintViolationException&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(StringUtils.hasText(ex.getMessage()))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result.failed(ResultEnum.VALIDATE_FAILED.getCode(),&nbsp;ex.getMessage()); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result.failed(ResultEnum.VALIDATE_FAILED); &nbsp;&nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;&nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;顶级异常捕获并统一处理，当其他异常无法处理时候选择使用 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ &nbsp;&nbsp;&nbsp;&nbsp;@ExceptionHandler({Exception.class}) &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Result&lt;?&gt;&nbsp;handle(Exception&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Result.failed(ex.getMessage()); &nbsp;&nbsp;&nbsp;&nbsp;}  }</code></pre> <p><strong>总结</strong></p> <p>做好了这一切改动后，可以发现 Controller 的代码变得非常简洁，可以很清楚地知道每一个参数、每一个 DTO 的校验规则，可以很明确地看到每一个 Controller 方法返回的是什么数据，也可以方便每一个异常应该如何进行反馈。</p> <p>这一套操作下来后，我们能更加专注于业务逻辑的开发，代码简介、功能完善，何乐而不为呢？</p> <pre class="has"><code class="language-go">-------------&nbsp; END&nbsp;&nbsp;------------- 扫码免费获取600+页石杉老师原创精品文章汇总PDF    原创技术文章汇总   点个在看你最好看</code></pre> </div> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>下一个：<a href="/news/article-35408.htm">上海农业大学动物医院官网（上海农业大学动物医院官网招聘）</a></p>
                                    </div>
                                        </div>

                        
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-14-free-subscribe-node.htm" title="「1月14日」最高速度22.8M/S，2025年V2ray/SSR/Shadowrocket/Clash每天更新免费订阅源地址">「1月14日」最高速度22.8M/S，2025年V2ray/SSR/Shadowrocket/Clash每天更新免费订阅源地址</a></li>
                        <li class="py-2"><a href="/news/article-47317.htm" title="springboot嵌入式数据库derby初探">springboot嵌入式数据库derby初探</a></li>
                        <li class="py-2"><a href="/news/article-59657.htm" title="重庆有领养宠物狗或猫的吗最近（重庆有领养宠物狗或猫的吗最近的地方）">重庆有领养宠物狗或猫的吗最近（重庆有领养宠物狗或猫的吗最近的地方）</a></li>
                        <li class="py-2"><a href="/news/article-48791.htm" title="动物疫苗接种时间间隔规定最新（动物疫苗接种时间表）">动物疫苗接种时间间隔规定最新（动物疫苗接种时间表）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-20-free-clash.htm" title="「1月20日」最高速度18M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费订阅源地址">「1月20日」最高速度18M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费订阅源地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-19-free-v2ray.htm" title="「1月19日」最高速度19.8M/S，2025年Clash/V2ray/Shadowrocket/SSR每天更新免费订阅源地址">「1月19日」最高速度19.8M/S，2025年Clash/V2ray/Shadowrocket/SSR每天更新免费订阅源地址</a></li>
                        <li class="py-2"><a href="/news/article-63818.htm" title="动物疫苗知识点总结大全（动物疫苗知识点总结大全图片）">动物疫苗知识点总结大全（动物疫苗知识点总结大全图片）</a></li>
                        <li class="py-2"><a href="/news/article-40875.htm" title="领养猫咪协议书范本（领养猫咪的协议）">领养猫咪协议书范本（领养猫咪的协议）</a></li>
                        <li class="py-2"><a href="/news/article-49311.htm" title="医院动物实验中心招聘（2021年实验动物中心招聘）">医院动物实验中心招聘（2021年实验动物中心招聘）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-21-free-v2ray-subscribe.htm" title="「1月21日」最高速度20.8M/S，2025年SSR/V2ray/Clash/Shadowrocket每天更新免费订阅源地址">「1月21日」最高速度20.8M/S，2025年SSR/V2ray/Clash/Shadowrocket每天更新免费订阅源地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">83</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>
                    ClashV2rayFree官网节点站 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>